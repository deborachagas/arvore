
name: Run CI
on: push

jobs:
  test-integration:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-20.04]
        otp: ['25']
        elixir: ['1.15.0']
    runs-on: ${{ matrix.os }}
    outputs:
      test-integration_id: ${{ steps.test-integration_step.outputs.test-integration_id }}

    services:
      db:
        image: "mysql:8.0.33"
        ports: ["3306:3306"]
        env:
          MYSQL_ROOT_PASSWORD: mysql

    steps:
      - uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: deps
          key: ${{ matrix.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles('**/mix.lock') }}

      - name: Cache build
        uses: actions/cache@v3
        id: cache-build
        with:
          path: _build
          key: ${{ matrix.os }}

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}

      - name: Install dependencies
        run: mix deps.get

      - name: Check unused dependencies
        run: mix deps.unlock --check-unused

      - name: Run format  
        run: mix format

      - name: Run Credo
        run: mix credo --strict

      - name: Compile code
        run: mix compile --warnings-as-errors --all-warnings

      - name: Clear test cache
        run: rm -rf _build/test

      - name: Run tests
        run: mix coveralls.lcov --warnings-as-errors | sed -e ':a' -e 'N' -e '$!ba' -e 's/\(\(WARNING:\ Deleting data for module\|Analysis includes data from imported files\)[^]]*]\n\)//g'; exit ${PIPESTATUS[0]}

  test-e2e:
    name: √Årvore Teste E2E
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run arvore-test.postman_collection.json

  deploy:
    name: Deploy app
    needs: [test-integration, test-e2e]
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
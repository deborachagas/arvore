{
	"info": {
		"_postman_id": "4f3050d5-0ce5-4173-9d8e-fa2af8971e20",
		"name": "arvore-test",
		"description": "Documentação API teste árvore",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "17915674"
	},
	"item": [
		{
			"name": "graphiql",
			"item": [
				{
					"name": "user-create-success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"validate json response\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"user\", jsonData.data);",
									"pm.environment.set(\"user-id\", jsonData.data.id);",
									"pm.environment.set(\"user-login\", jsonData.data.login);",
									"pm.environment.set(\"user-password\", \"senha\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"teste-postman\",\n    \"login\": \"teste-postman\",\n    \"password\": \"senha\",\n    \"type\": \"admin\",\n    \"email\": \"test-postman@teste.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/api/v1/accounts/users"
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"validate json response\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"var jsonData = pm.response.json().data;",
									"pm.environment.set(\"token\", jsonData.jwt);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{user-login}}\",\n    \"password\": \"{{user-password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/api/v1/accounts/login"
					},
					"response": []
				},
				{
					"name": "gpl-entity-index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"validate json response\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  allEntities {\n    id\n    name\n    inep\n    entityType\n    parent {\n        id\n        name\n    }\n    subtree {\n        id\n        name\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": "{{url}}/graphiql"
					},
					"response": []
				},
				{
					"name": "gpl-entity-show",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"validate json response\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  findEntity(id: 1) {\n    id\n    name\n    inep\n    entityType\n    parent {\n        id\n        name\n    }\n    subtree {\n        id\n        name\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": "{{url}}/graphiql"
					},
					"response": []
				},
				{
					"name": "gpl-entity-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"validate json response\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"var jsonData = pm.response.json().data.createEntity",
									"pm.environment.set(\"new-entity-id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  createEntity(\n    name: \"entity\",\n    entityType: \"network\",\n  ) {\n    id\n    name\n    entity_type\n    inep\n    parent_id\n  }\n}",
								"variables": ""
							}
						},
						"url": "{{url}}/graphiql"
					},
					"response": []
				},
				{
					"name": "entity-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"validate json response\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"var jsonData = pm.response.json().data;",
									"pm.test(\"validate entity values\", function () {   ",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"new-entity-id\")); ",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"new-entity-name\"));",
									"    pm.expect(jsonData.inep).to.eql(pm.environment.get(\"new-entity-inep\"));",
									"    pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"new-entity-parent-id\"));",
									"    pm.expect(jsonData.entity_type).to.eql(pm.environment.get(\"new-entity-type\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/api/v2/partners/entities/{{new-entity-id}}"
					},
					"response": []
				},
				{
					"name": "user-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"validate json response\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/api/v1/accounts/users/{{user-id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.have.body(\"ok\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/health"
			},
			"response": []
		},
		{
			"name": "user-create-success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"user\", jsonData.data);",
							"pm.environment.set(\"user-id\", jsonData.data.id);",
							"pm.environment.set(\"user-login\", jsonData.data.login);",
							"pm.environment.set(\"user-password\", \"senha\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"teste-postman\",\n    \"login\": \"teste-postman\",\n    \"password\": \"senha\",\n    \"type\": \"admin\",\n    \"email\": \"test-postman@teste.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/api/v1/accounts/users"
			},
			"response": []
		},
		{
			"name": "user-create-error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json().errors;",
							"pm.test(\"validate create error\", function () {  ",
							"    pm.expect(jsonData.email).to.eql([\"can't be blank\"]);",
							"    pm.expect(jsonData.name).to.eql([\"can't be blank\"]);",
							"    pm.expect(jsonData.password).to.eql([\"can't be blank\"]);",
							"    pm.expect(jsonData.type).to.eql([\"can't be blank\"]);  ",
							"    pm.expect(jsonData.login).to.eql([\"can't be blank\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": null,\n    \"login\": null,\n    \"password\": null,\n    \"type\": null,\n    \"email\": null\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/api/v1/accounts/users"
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json().data;",
							"pm.environment.set(\"token\", jsonData.jwt);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"login\": \"{{user-login}}\",\n    \"password\": \"{{user-password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/api/v1/accounts/login"
			},
			"response": []
		},
		{
			"name": "login-error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"validate invalid password error\", function () {",
							"    var jsonData = pm.response.json().error;",
							"     pm.expect(jsonData.name).to.eql(pm.environment.get(\"Invalid password\"));",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"login\": \"{{user-login}}\",\n    \"password\": \"11111\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/api/v1/accounts/login"
			},
			"response": []
		},
		{
			"name": "entity-index",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"entity-id\", jsonData.data[1].id);",
							"pm.environment.set(\"entity-name\", jsonData.data[1].name);",
							"pm.environment.set(\"entity-type\", jsonData.data[1].entity_type);",
							"pm.environment.set(\"entity-inep\", jsonData.data[1].inep);",
							"pm.environment.set(\"entity-parent-id\", jsonData.data[1].parent_id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{url}}/api/v2/partners/entities"
			},
			"response": []
		},
		{
			"name": "entity-show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json().data;",
							"pm.test(\"validate get entity values\", function () {    ",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"entity-name\"));",
							"    pm.expect(jsonData.inep).to.eql(pm.environment.get(\"entity-inep\"));",
							"    pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"entity-parent-id\"));",
							"    pm.expect(jsonData.entity_type).to.eql(pm.environment.get(\"entity-type\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{url}}/api/v2/partners/entities/{{entity-id}}"
			},
			"response": []
		},
		{
			"name": "entity-show-not-found-error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.test(\"validate not found error\", function () {    ",
							"    pm.expect(jsonData.error).to.eql(\"Not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{url}}/api/v2/partners/entities/111111111"
			},
			"response": []
		},
		{
			"name": "entity-create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json().data;",
							"pm.environment.set(\"new-entity-id\", jsonData.id);",
							"pm.environment.set(\"new-entity-name\", jsonData.name);",
							"pm.environment.set(\"new-entity-type\", jsonData.entity_type);",
							"pm.environment.set(\"new-entity-inep\", jsonData.inep);",
							"pm.environment.set(\"new-entity-parent-id\", jsonData.parent_id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"NetworkTeste\",\n    \"entity_type\": \"network\"\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/api/v2/partners/entities"
			},
			"response": []
		},
		{
			"name": "entity-create-error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json().errors;",
							"pm.test(\"validate entity values\", function () {    ",
							"    pm.expect(jsonData.name).to.eql([\"can't be blank\"]);",
							"    pm.expect(jsonData.entity_type).to.eql([\"invalid entity type\", \"can't be blank\"]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": null,\n    \"entity_type\": null\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/api/v2/partners/entities"
			},
			"response": []
		},
		{
			"name": "entity-update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json().data;",
							"pm.test(\"validate entity updated values\", function () {    ",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"new-entity-id\"));",
							"    pm.expect(jsonData.name).not.eql(pm.environment.get(\"new-entity-name\"));",
							"    pm.expect(jsonData.entity_type).to.eql(pm.environment.get(\"new-entity-type\"));",
							"    pm.expect(jsonData.parend_id).to.eql(pm.environment.get(\"new-entity-parend-id\"));",
							"});",
							"",
							"pm.environment.set(\"new-entity-name\", jsonData.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"NetworkTesteUpdate\"\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/api/v2/partners/entities/{{new-entity-id}}"
			},
			"response": []
		},
		{
			"name": "entity-update-not-found-error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.test(\"validate not found error\", function () {    ",
							"    pm.expect(jsonData.error).to.eql(\"Not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"NetworkTesteUpdate\"\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/api/v2/partners/entities/1111111111"
			},
			"response": []
		},
		{
			"name": "entity-update-error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json().errors;",
							"pm.test(\"validate update error\", function () {    ",
							"    pm.expect(jsonData.name).to.eql([\"can't be blank\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": null\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/api/v2/partners/entities/{{new-entity-id}}"
			},
			"response": []
		},
		{
			"name": "entity-delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json().data;",
							"pm.test(\"validate entity values\", function () {   ",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"new-entity-id\")); ",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"new-entity-name\"));",
							"    pm.expect(jsonData.inep).to.eql(pm.environment.get(\"new-entity-inep\"));",
							"    pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"new-entity-parent-id\"));",
							"    pm.expect(jsonData.entity_type).to.eql(pm.environment.get(\"new-entity-type\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{url}}/api/v2/partners/entities/{{new-entity-id}}"
			},
			"response": []
		},
		{
			"name": "entity-delete-not-found-error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.test(\"validate not found error\", function () {    ",
							"    pm.expect(jsonData.error).to.eql(\"Not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{url}}/api/v2/partners/entities/111111111"
			},
			"response": []
		},
		{
			"name": "entity-delete-error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"var jsonData = pm.response.json().errors;",
							"pm.test(\"validate error when has assoc parent\", function () {   ",
							"    pm.expect(jsonData.subtree).to.eql([\"are still associated with this entry\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{url}}/api/v2/partners/entities/1"
			},
			"response": []
		},
		{
			"name": "user-delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"validate json response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{url}}/api/v1/accounts/users/{{user-id}}"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({",
					"    key: \"Accept\",",
					"    value: \"application/json\"",
					"})",
					"pm.globals.set(\"url\", \"https://teste-debora-arvore.fly.dev\");",
					"// pm.globals.set(\"url\", \"http://localhost:4000\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}